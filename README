###########################################################################
# This program is Copyright (C) 1986, 1987, 1988 by Jonathan Payne.  JOVE #
# is provided to you without charge, and with no warranty.  You may give  #
# away copies of JOVE, including sources, provided that this notice is    #
# included in all the files.                                              #
###########################################################################

To make JOVE edit Makefile to set the right directories for the binaries,
on line documentation, the man pages, and the TMP files and select the
appropriate load command (see SEPFLAG in Makefile).  (IMPORTANT! read the
Makefile carefully.)  "tune.c" will be created from "tune.template" by
MAKE automatically, and it will use the directories you specified in the
Makefile.  (NOTE:  You should never edit tune.c directly because your
changes will be undone by the next make.  If you want to make a change to
a part of tune.c that isn't a directory name, you should edit
tune.template.)

You need to set "SYSDEFS = " some symbol that defines your system, using
the notation for a macro-setting flag to the C compiler.  For example, on
a Sun running SunOS 4.0, use "SYSDEFS=-DSUNOS40".  You can use "grep
System: sysdep.h" to find all currently supported system configs.  If
there is no canned configuration for your system, you will have to define
a new symbol and edit sysdep.h suitably.  See sysdep.doc for the possible
set of system dependent aspects that you can select/tune.

Next you must edit "tune.h" selecting the compile time features you care
about.  See tune.doc for a description of all the compile time options.  The
default options are quite reasonable, in most cases, you should leave them
alone.  If you are really short on space, or are porting Jove to a new
system, you may want to define -DBAREBONES in SYSDEFS to avoid some of the
less-portable features of Jove initially.

You can type "make" to compile XJOVE, PORTSRV (this is compiled on every
system, but is only used if JOVE is compiled with the PIPEPROCS feature
selection, typically on UNIX systems without pseudo ttys), RECOVER
TEACHJOVE, and MACVERT.  NOTE:  make won't work if it fires up /bin/csh
for the shell commands.  Test xjove to see if it works (remember that it
won't be able to access its subsidiary files until they are installed).
If it does, type "make install" to install everything where it belongs.

Here are some things to consider for deciding where to put the tmp files.
TMPDIR is where the tmp files get stored, usually /tmp or /tmp/jove.  If
your system does not remove subdirectories of /tmp on reboot (lots do
remove them these days) then it makes sense to make TMPDIR be /tmp/jove.
But if you want to recover buffers on system crashes, you should put the 
lines
				(echo preserving Jove files) 	>/dev/console
(cd /tmp; /usr/local/lib/jovelib/recover -syscrash) >/dev/console

in the /etc/rc file BEFORE /tmp is cleared, so that you can recover
files after reboots. There shoudl be a crontab entry to clear out
old files in /usr/preserve.

For the pdp11 version there is the Ovmakefile.  This has only been tested
on 2.9bsd.  It works pretty well, actually, and it is possible to turn on
all the compile time options with this version.

Bug reports:  If you find bugs in JOVE I would appreciate hearing about
them.  (My net address is at end of this message.)  So, send me the bug
reports.  If the bug isn't already fixed, I will ask you to send me the
fix.  If you haven't found the bug, I may be able to, so don't wait until
you have found it.  If you make improvements to JOVE and want them
incorporated into the official version, send me a message explaining what
the change is, and I will decide whether I want to include it.  If it is
possible for your change to be #ifdef'd in, that would be best, since I
want to avoid making JOVE huge.  For instance, if it's a new package type
thing (say, like word abbrev. mode, or something) then it would be best
if that were a compile-time option.  I will send out periodic updates to
comp.sources.unix.  I will report all significant bug fixes there, and to
comp.editors and comp.emacs as well.

In Jove 4.8, the macros were rewritten from scratch.  The most noteable
change is that they are no longer stored in binary files.  The
write-macros-to-file command writes a file which is suitable for use with
the source command.  So you can have actual macro definitions in your
.joverc if you want.  If you have lots of macros defined in the old format,
you can use the macvert program to convert them to the new style.  You say
	macvert old-style-macros-file > new-style-macro-file

"doc/system.rc" and "doc/example.rc" are jove initialization files.
"system.rc" is the "system" rc file here at UoR, and it gets ready every
time JOVE starts up FOR EVERYONE.  ("make install" should copy the
system-wide .joverc to the right place automatically.)  After that JOVE
reads an initialization file in the user's home directory.  "example.rc"
is my personal .joverc.

The files "jove.[12345]" in DOC are the official JOVE manual.  I got
permission from Richard Stallman to use his manual for the original EMACS,
modifying it where necessary for JOVE.  Lots of work was done by Brian
Harvey on this manual.

There are man pages for jove and teachjove.  Teachjove is for people who
have never used EMACS style editors.  It is an interactive tutorial, THE
tutorial written by Stallman for the original EMACS, only slightly
modified for JOVE in the appropriate places.  The man pages are
completely up to date, thanks to me.

Thanks to Jay (hack) Fenlason for writing the original pty code.

Thanks to Dave Curry at Purdue for putting in tons of time and effort
into getting JOVE ready.  It just wouldn't be working without his help.

Thanks to Jeff Mc Carrell at Berkeley for finding bugs and adding
features, in particular, the comment formatter.

Thanks to Karl Gegenfurtner for making the PC version.

Thanks to Ken Mitchum for the Macintosh verison.

Thanks to Hugh Redelmeier for his input, his experience, countless bug
fixes, and ... that's it, I guess.

(Thanks to Brian Harvey for teaching me about linked lists ...)

Good luck, have fun.

	Jonathan Payne (jpayne@sun.com until further notice :-)
